generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(255)
  oracle_id    String  @unique @db.VarChar(255)
  scryfall_uri String  @db.VarChar(255)
  image_uris   Json
  set_name     String? @db.VarChar(255)
  set_code     String? @db.VarChar(9)
  set_type     String? @db.VarChar(60)
  type_line    String? @db.VarChar(255)
  oracle_text  String? @db.VarChar(512)
}

model price_entry {
  id         Int       @id @default(autoincrement())
  oracle_id  String?   @db.VarChar(255)
  price_list String?
  date       DateTime? @db.Date
  frequency  Int       @default(1)

  @@unique([oracle_id, date])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model sealed_prices {
  id         Int       @default(autoincrement())
  name       String
  link       String
  image      String?
  price      Float?
  stock      Int?
  website    String
  language   String
  tags       String[]
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  @@id([name, website, language, link])
}

model search {
  id          Int     @id @default(autoincrement())
  query       String? @db.VarChar
  websites    String? @db.VarChar(512)
  query_type  String? @db.VarChar(60)
  results     String? @db.VarChar(255)
  num_results Int?
  timestamp   String? @db.VarChar
}

model set {
  id             Int      @default(autoincrement())
  name           String   @db.VarChar(255)
  base_set_size  Int
  total_set_size Int
  code           String   @db.VarChar(20)
  release_date   DateTime @db.Date
  type           String   @db.VarChar(255)

  @@id([name, base_set_size, code, release_date, type])
}

model users {
  id                       Int                       @id(map: "user_pkey") @default(autoincrement())
  username                 String                    @db.VarChar
  first_name               String                    @default("") @db.VarChar
  last_name                String                    @default("") @db.VarChar
  email                    String                    @db.VarChar
  disabled                 Boolean                   @default(false)
  user_type                String                    @default("user") @db.VarChar
  clerkId                  String?                   @unique @db.VarChar(255)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  profileImageUrl          String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}
